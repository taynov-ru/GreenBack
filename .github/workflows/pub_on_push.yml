name: Publish on Docker Hub and Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

env:
  BOT_NAME: ${{secrets.BOT_NAME}}
  BOT_ADMIN: ${{secrets.BOT_ADMIN}}
  BOT_TOKEN: ${{secrets.BOT_TOKEN}}

jobs:
  test:
    runs-on: arc-runner-set

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Gradle Tests
        run: |
          ./gradlew test

  build_jar:
    runs-on: arc-runner-set
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@ccb4328a959376b642e027874838f60f8e596de3
      - name: Build with Gradle
        uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629
        with:
          arguments: build
      - uses: actions/upload-artifact@v4
        with:
          name: Package
          path: tg-bot-service/build/libs

  build_and_pub:
    needs:
      - test
      - build_jar
    runs-on: arc-runner-set
    env:
      GH_REGISTRY: "https://index.docker.io/v1/"
      IMAGE_NAME: "${{ github.repository }}/greenback"
    outputs:
      container_image: ${{ env.image }}
    steps:
      - name: Login to Docker registry
        run: echo ${DOCKER_PASS} | docker login -u $DOCKER_LOGIN --password-stdin
        env:
          DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          name: Package
      - name: Prepare image name
        run: |
          echo "image=$GH_REGISTRY/$IMAGE_NAME:$(echo ${GITHUB_SHA} | head  -c 7)" >> $GITHUB_ENV
      - name: Build image
        run: docker build -t ${{ env.image }} -f Dockerfile .
      - name: Push image to docker.io
        run: docker push ${{ env.image }}